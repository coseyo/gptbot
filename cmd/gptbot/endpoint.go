// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package main

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpcodec"
	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/validating/v3"
	"github.com/coseyo/gptbot"
	"github.com/go-kit/kit/endpoint"
)

type ChatRequest struct {
	Question string         `json:"question"`
	History  []*gptbot.Turn `json:"history"`
}

// ValidateChatRequest creates a validator for ChatRequest.
func ValidateChatRequest(newSchema func(*ChatRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ChatRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ChatResponse struct {
	Answer string `json:"answer"`
	Err    error  `json:"-"`
}

func (r *ChatResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *ChatResponse) Failed() error { return r.Err }

// MakeEndpointOfChat creates the endpoint for s.Chat.
func MakeEndpointOfChat(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ChatRequest)
		answer, err := s.Chat(
			ctx,
			req.Question,
			req.History,
		)
		return &ChatResponse{
			Answer: answer,
			Err:    err,
		}, nil
	}
}

type CreateDocumentsRequest struct {
	Documents []*gptbot.Document `json:"documents"`
}

// ValidateCreateDocumentsRequest creates a validator for CreateDocumentsRequest.
func ValidateCreateDocumentsRequest(newSchema func(*CreateDocumentsRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*CreateDocumentsRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type CreateDocumentsResponse struct {
	Err error `json:"-"`
}

func (r *CreateDocumentsResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *CreateDocumentsResponse) Failed() error { return r.Err }

// MakeEndpointOfCreateDocuments creates the endpoint for s.CreateDocuments.
func MakeEndpointOfCreateDocuments(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateDocumentsRequest)
		err := s.CreateDocuments(
			ctx,
			req.Documents,
		)
		return &CreateDocumentsResponse{
			Err: err,
		}, nil
	}
}

type DeleteDocumentsRequest struct {
	DocumentIds []string `json:"document_ids"`
}

// ValidateDeleteDocumentsRequest creates a validator for DeleteDocumentsRequest.
func ValidateDeleteDocumentsRequest(newSchema func(*DeleteDocumentsRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteDocumentsRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteDocumentsResponse struct {
	Err error `json:"-"`
}

func (r *DeleteDocumentsResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteDocumentsResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteDocuments creates the endpoint for s.DeleteDocuments.
func MakeEndpointOfDeleteDocuments(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteDocumentsRequest)
		err := s.DeleteDocuments(
			ctx,
			req.DocumentIds,
		)
		return &DeleteDocumentsResponse{
			Err: err,
		}, nil
	}
}

type UploadFileRequest struct {
	File *httpcodec.FormFile `json:"file"`
}

// ValidateUploadFileRequest creates a validator for UploadFileRequest.
func ValidateUploadFileRequest(newSchema func(*UploadFileRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UploadFileRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UploadFileResponse struct {
	Err error `json:"-"`
}

func (r *UploadFileResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UploadFileResponse) Failed() error { return r.Err }

// MakeEndpointOfUploadFile creates the endpoint for s.UploadFile.
func MakeEndpointOfUploadFile(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UploadFileRequest)
		err := s.UploadFile(
			ctx,
			req.File,
		)
		return &UploadFileResponse{
			Err: err,
		}, nil
	}
}
